apiVersion: apps/v1
kind: Deployment
metadata:
  name: company-service
  namespace: trade-marketing
  labels:
    app: company-service
    component: microservice
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: company-service
  template:
    metadata:
      labels:
        app: company-service
        component: microservice
        tier: backend
    spec:
      containers:
      - name: company-service
        image: trade-marketing/company-service:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: connection-string
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: redis-url
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: company-service
  namespace: trade-marketing
spec:
  selector:
    app: company-service
  ports:
  - port: 3001
    targetPort: 3001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: identity-service
  namespace: trade-marketing
  labels:
    app: identity-service
    component: microservice
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: identity-service
  template:
    metadata:
      labels:
        app: identity-service
        component: microservice
        tier: backend
    spec:
      containers:
      - name: identity-service
        image: trade-marketing/identity-service:latest
        ports:
        - containerPort: 3002
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: connection-string
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: jwt-secret
        - name: OFFICE365_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: oauth-secrets
              key: office365-client-id
        - name: OFFICE365_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: oauth-secrets
              key: office365-client-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3002
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: identity-service
  namespace: trade-marketing
spec:
  selector:
    app: identity-service
  ports:
  - port: 3002
    targetPort: 3002
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trade-marketing-service
  namespace: trade-marketing
  labels:
    app: trade-marketing-service
    component: microservice
    tier: backend
spec:
  replicas: 4
  selector:
    matchLabels:
      app: trade-marketing-service
  template:
    metadata:
      labels:
        app: trade-marketing-service
        component: microservice
        tier: backend
    spec:
      containers:
      - name: trade-marketing-service
        image: trade-marketing/trade-marketing-service:latest
        ports:
        - containerPort: 3003
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: connection-string
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: redis-url
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: kafka-brokers
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "600m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3003
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3003
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: trade-marketing-service
  namespace: trade-marketing
spec:
  selector:
    app: trade-marketing-service
  ports:
  - port: 3003
    targetPort: 3003
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics-service
  namespace: trade-marketing
  labels:
    app: analytics-service
    component: microservice
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: analytics-service
  template:
    metadata:
      labels:
        app: analytics-service
        component: microservice
        tier: backend
    spec:
      containers:
      - name: analytics-service
        image: trade-marketing/analytics-service:latest
        ports:
        - containerPort: 3004
        env:
        - name: NODE_ENV
          value: "production"
        - name: ELASTICSEARCH_URL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: elasticsearch-url
        - name: CLICKHOUSE_URL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: clickhouse-url
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: redis-url
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3004
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3004
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: analytics-service
  namespace: trade-marketing
spec:
  selector:
    app: analytics-service
  ports:
  - port: 3004
    targetPort: 3004
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: integration-service
  namespace: trade-marketing
  labels:
    app: integration-service
    component: microservice
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: integration-service
  template:
    metadata:
      labels:
        app: integration-service
        component: microservice
        tier: backend
    spec:
      containers:
      - name: integration-service
        image: trade-marketing/integration-service:latest
        ports:
        - containerPort: 3005
        env:
        - name: NODE_ENV
          value: "production"
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: redis-url
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: kafka-brokers
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3005
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3005
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: integration-service
  namespace: trade-marketing
spec:
  selector:
    app: integration-service
  ports:
  - port: 3005
    targetPort: 3005
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: trade-marketing
  labels:
    app: notification-service
    component: microservice
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
        component: microservice
        tier: backend
    spec:
      containers:
      - name: notification-service
        image: trade-marketing/notification-service:latest
        ports:
        - containerPort: 3006
        env:
        - name: NODE_ENV
          value: "production"
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: redis-url
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: kafka-brokers
        - name: SMTP_HOST
          valueFrom:
            secretKeyRef:
              name: notification-secrets
              key: smtp-host
        - name: SMTP_USER
          valueFrom:
            secretKeyRef:
              name: notification-secrets
              key: smtp-user
        - name: SMTP_PASS
          valueFrom:
            secretKeyRef:
              name: notification-secrets
              key: smtp-pass
        - name: TWILIO_SID
          valueFrom:
            secretKeyRef:
              name: notification-secrets
              key: twilio-sid
        - name: TWILIO_TOKEN
          valueFrom:
            secretKeyRef:
              name: notification-secrets
              key: twilio-token
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3006
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3006
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: trade-marketing
spec:
  selector:
    app: notification-service
  ports:
  - port: 3006
    targetPort: 3006
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: file-service
  namespace: trade-marketing
  labels:
    app: file-service
    component: microservice
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: file-service
  template:
    metadata:
      labels:
        app: file-service
        component: microservice
        tier: backend
    spec:
      containers:
      - name: file-service
        image: trade-marketing/file-service:latest
        ports:
        - containerPort: 3007
        env:
        - name: NODE_ENV
          value: "production"
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: redis-url
        - name: S3_BUCKET
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: s3-bucket
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-secrets
              key: access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-secrets
              key: secret-access-key
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "600m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3007
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3007
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: file-storage
          mountPath: /app/uploads
      volumes:
      - name: file-storage
        persistentVolumeClaim:
          claimName: file-storage-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: file-service
  namespace: trade-marketing
spec:
  selector:
    app: file-service
  ports:
  - port: 3007
    targetPort: 3007